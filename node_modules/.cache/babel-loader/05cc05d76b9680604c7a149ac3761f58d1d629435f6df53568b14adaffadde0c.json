{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\movies-client\\\\my-react-app\\\\src\\\\components\\\\MovieComments.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getAllCommentsForMovie } from '../api/commentApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieComments = ({\n  movieId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const refreshComments = async () => {\n    const data = await getAllCommentsForMovie(movieId);\n    setComments(data);\n  };\n  useEffect(() => {\n    refreshComments();\n  }, [movieId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"By User \", comment.userId, \" on\", ' ', new Date(comment.createdAt).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddComment, {\n      movieId: movieId,\n      onCommentAdded: refreshComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieComments, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = MovieComments;\nexport default MovieComments;\nvar _c;\n$RefreshReg$(_c, \"MovieComments\");","map":{"version":3,"names":["React","useEffect","useState","getAllCommentsForMovie","jsxDEV","_jsxDEV","MovieComments","movieId","_s","comments","setComments","refreshComments","data","children","fileName","_jsxFileName","lineNumber","columnNumber","map","comment","content","userId","Date","createdAt","toLocaleDateString","id","AddComment","onCommentAdded","_c","$RefreshReg$"],"sources":["D:/Work/movies-client/my-react-app/src/components/MovieComments.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getAllCommentsForMovie } from '../api/commentApi';\r\n\r\ninterface MovieCommentsProps {\r\n  movieId: string;\r\n}\r\n\r\nconst MovieComments = ({ movieId }: MovieCommentsProps) => {\r\n  interface Comment {\r\n    id: string;\r\n    content: string;\r\n    userId: string;\r\n    createdAt: string;\r\n  }\r\n\r\n  const [comments, setComments] = useState<Comment[]>([]);\r\n\r\n  const refreshComments = async () => {\r\n    const data = await getAllCommentsForMovie(movieId);\r\n    setComments(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshComments();\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Comments</h2>\r\n      <ul>\r\n        {comments.map((comment) => (\r\n          <li key={comment.id}>\r\n            <p>{comment.content}</p>\r\n            <small>\r\n              By User {comment.userId} on{' '}\r\n              {new Date(comment.createdAt).toLocaleDateString()}\r\n            </small>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {/* Pass refreshComments to AddComment */}\r\n      <AddComment movieId={movieId} onCommentAdded={refreshComments} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieComments;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,sBAAsB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM3D,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAA4B,CAAC,KAAK;EAAAC,EAAA;EAQzD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAY,EAAE,CAAC;EAEvD,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,IAAI,GAAG,MAAMT,sBAAsB,CAACI,OAAO,CAAC;IAClDG,WAAW,CAACE,IAAI,CAAC;EACnB,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdU,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EAEb,oBACEF,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBZ,OAAA;MAAAQ,QAAA,EACGJ,QAAQ,CAACS,GAAG,CAAEC,OAAO,iBACpBd,OAAA;QAAAQ,QAAA,gBACER,OAAA;UAAAQ,QAAA,EAAIM,OAAO,CAACC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxBZ,OAAA;UAAAQ,QAAA,GAAO,UACG,EAACM,OAAO,CAACE,MAAM,EAAC,KAAG,EAAC,GAAG,EAC9B,IAAIC,IAAI,CAACH,OAAO,CAACI,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA,GALDE,OAAO,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAELZ,OAAA,CAACqB,UAAU;MAACnB,OAAO,EAAEA,OAAQ;MAACoB,cAAc,EAAEhB;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEV,CAAC;AAACT,EAAA,CArCIF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAuCnB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}